<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>developer on Mangudaigb Tech Corner</title>
    <link>https://mangudaigb.github.io/tags/developer/</link>
    <description>Recent content in developer on Mangudaigb Tech Corner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Jibitesh Prasad</copyright>
    <lastBuildDate>Wed, 30 Dec 2020 02:52:14 +0530</lastBuildDate>
    
	<atom:link href="https://mangudaigb.github.io/tags/developer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building Linux Kernel From Source</title>
      <link>https://mangudaigb.github.io/posts/kernel/build-from-source/</link>
      <pubDate>Wed, 30 Dec 2020 02:52:14 +0530</pubDate>
      
      <guid>https://mangudaigb.github.io/posts/kernel/build-from-source/</guid>
      <description>Introduction We will be building the linux kernel on a debian system running in Virtual Box.
Installing Debian on Virtual Box The installation process is quite simple, so we will be talking about installing the Guest Ons on the image.
Guest Additions of Virtual Box First update the OS.
$ sudo apt update $ sudo apt install build-essential dkms linux-headers-$(uname -r) From the virtual machine menu, click Devices -&amp;gt; “Insert Guest Additions CD Image” as shown on the image below:</description>
    </item>
    
    <item>
      <title>Bootloader</title>
      <link>https://mangudaigb.github.io/project/myos/bootloader/</link>
      <pubDate>Tue, 10 Mar 2020 02:52:14 +0530</pubDate>
      
      <guid>https://mangudaigb.github.io/project/myos/bootloader/</guid>
      <description>Introduction Writing an operating system is one of the most difficult programming task. This blog series is a practical guide at writing your own x86 operating system. This series aims at educating on various aspects of writing an Operating System and not providing a full fledged operating system.
When a computer is turned on, it typically does not have an operating system or its loader in random-access memory(RAM). The system first loads the program from Read Only Memory(ROM) alongwith a small amount of needed data, to access the nonvolatile device or devices from which the operating system can be loaded.</description>
    </item>
    
    <item>
      <title>Internet Security: Transport Layer Security</title>
      <link>https://mangudaigb.github.io/posts/internet-security-tls/</link>
      <pubDate>Tue, 10 Mar 2020 02:52:14 +0530</pubDate>
      
      <guid>https://mangudaigb.github.io/posts/internet-security-tls/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Linux Control Groups</title>
      <link>https://mangudaigb.github.io/posts/linux/linux-cgroups/</link>
      <pubDate>Tue, 10 Mar 2020 02:52:14 +0530</pubDate>
      
      <guid>https://mangudaigb.github.io/posts/linux/linux-cgroups/</guid>
      <description>Introduction Control Groups provide a mechanism for aggregating/partitioning sets of tasks, and all their future chilren processes into hierarchical groups with specialized behaviour alongwith the resources used be monitored and limited.
There had been multiple efforts to provide process aggregations in the Linux Kernel, mainly for resource-tracking purposes like cpusets, CKRM/ResGroups, UserBeanCounters and virtual server namespaces. These all require the basic notion of a grouping/partitioning of processes, with newly forked process being assigned to the same group as their parent process.</description>
    </item>
    
    <item>
      <title>Linux Namespaces</title>
      <link>https://mangudaigb.github.io/posts/linux/linux-namespaces/</link>
      <pubDate>Tue, 10 Mar 2020 02:52:14 +0530</pubDate>
      
      <guid>https://mangudaigb.github.io/posts/linux/linux-namespaces/</guid>
      <description>Namespaces are a feature of the linux kernel that partitions resources to let a process see only a set of resources attached to its namespace, while another set of processes sees a different set of resources. Resources can be physical or virtual in nature. The Linux Kernel provides 6 types of namespaces: pid, net, mnt, uts, ipc and user.
A namespace&amp;rsquo;s networking can range from none at all to full access to the system&amp;rsquo;s capabilities.</description>
    </item>
    
    <item>
      <title>My Kubernetes</title>
      <link>https://mangudaigb.github.io/project/kubernetes/</link>
      <pubDate>Tue, 10 Mar 2020 02:52:14 +0530</pubDate>
      
      <guid>https://mangudaigb.github.io/project/kubernetes/</guid>
      <description>Creating a Custom Kubernetes System</description>
    </item>
    
    <item>
      <title>My OS</title>
      <link>https://mangudaigb.github.io/project/myos/</link>
      <pubDate>Tue, 10 Mar 2020 02:52:14 +0530</pubDate>
      
      <guid>https://mangudaigb.github.io/project/myos/</guid>
      <description>Creating a Custom Operating System</description>
    </item>
    
    <item>
      <title>Registers</title>
      <link>https://mangudaigb.github.io/project/myos/register/</link>
      <pubDate>Tue, 10 Mar 2020 02:52:14 +0530</pubDate>
      
      <guid>https://mangudaigb.github.io/project/myos/register/</guid>
      <description>Introduction Processors process data which is generally stored in memory, this reading and storing of data into memory slows down the processor as the data has to pass through the control bus and into the memory storage unit and getting the data through the same channel. To speed up the processor operations, the processor includes some internal memory storage location called Registers. These register store data elements for processing without having to access the memory.</description>
    </item>
    
    <item>
      <title>Setting Up Kubernetes on Local System</title>
      <link>https://mangudaigb.github.io/project/kubernetes/setup-kubernetes/</link>
      <pubDate>Tue, 10 Mar 2020 02:52:14 +0530</pubDate>
      
      <guid>https://mangudaigb.github.io/project/kubernetes/setup-kubernetes/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>